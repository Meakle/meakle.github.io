(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{615:function(a,t,e){"use strict";e.r(t);var r=e(3),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"reduce"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce")]),a._v(" "),e("p",[a._v("reduce是Array对象中内置的一个方法。我们用它来对数组中的元素进行操作。")]),a._v(" "),e("h3",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),e("p",[a._v("MDN中将"),e("code",[a._v("previousValue")]),a._v("叫成累加器（accumulator），我觉得不合适，因此改成了"),e("code",[a._v("previousValue")])]),a._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("reduce")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("callbackfn"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("previousValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" currentValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" currentIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" initialValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),e("p",[e("code",[a._v("callbackfn")]),a._v("：回调函数，用以处理数据，这个回调将会对着Array中的每一个元素都执行一遍。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("previousValue")]),a._v("：上一次处理的值，或者是"),e("code",[a._v("initialValue")]),a._v(" （第一次）")]),a._v(" "),e("li",[e("code",[a._v("currentValue")]),a._v("：当前处理的值。")]),a._v(" "),e("li",[e("code",[a._v("currentIndex")]),a._v("：可选项，代表着"),e("code",[a._v("currentValue")]),a._v("在"),e("code",[a._v("Array")]),a._v("中的下标。如果有"),e("code",[a._v("initialValue")]),a._v("，从0开始，否则从1开始")]),a._v(" "),e("li",[e("code",[a._v("array")]),a._v("：可选项，当前操作的array")])]),a._v(" "),e("p",[e("code",[a._v("initialValue")]),a._v("：初始值，作为第一个参数传递给第一次调用的"),e("code",[a._v("callbackfn")]),a._v(" ，如果没有设置初始值，那么使用array的第一个元素作为"),e("code",[a._v("callback")]),a._v("的第一个参数，并且第一个元素将不会作为"),e("code",[a._v("currentValue")]),a._v("出现（skipped as currentValue）。当你在一个没有"),e("code",[a._v("initialValue")]),a._v("的空数组调用"),e("code",[a._v("reduce()")]),a._v("将会抛出"),e("code",[a._v("TypeError")]),a._v("。")])])}),[],!1,null,null,null);t.default=s.exports}}]);