(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{630:function(t,n,s){"use strict";s.r(n);var a=s(3),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"题面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题面"}},[t._v("#")]),t._v(" 题面")]),t._v(" "),s("p",[t._v("写一个 RecentCounter 类来计算特定时间范围内最近的请求。")]),t._v(" "),s("p",[t._v("请你实现 RecentCounter 类：")]),t._v(" "),s("p",[s("code",[t._v("RecentCounter()")]),t._v(" 初始化计数器，请求数为 0 。")]),t._v(" "),s("p",[s("code",[t._v("int ping(int t)")]),t._v(" 在时间 t 添加一个新请求，其中 t 表示以毫秒为单位的某个时间，并返回过去 3000 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 "),s("code",[t._v("[t-3000, t]")]),t._v("  内发生的请求数。")]),t._v(" "),s("p",[t._v("保证 每次对 ping 的调用都使用比之前更大的 t 值。")]),t._v(" "),s("p",[s("strong",[t._v("示例：")])]),t._v(" "),s("p",[t._v("输入：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('["RecentCounter", "ping", "ping", "ping", "ping"]\n[[], [1], [100], [3001], [3002]]\n输出：\n[null, 1, 2, 3, 3]\n')])])]),s("p",[t._v("解释：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("RecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1]，范围是 [-2999,1]，返回 1\nrecentCounter.ping(100);   // requests = [1, 100]，范围是 [-2900,100]，返回 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001]，范围是 [1,3001]，返回 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3\n")])])]),s("p",[t._v("提示：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("1 <= t <= 109")])])]),t._v(" "),s("li",[s("p",[t._v("保证每次对 ping 调用所使用的 t 值都 严格递增")])]),t._v(" "),s("li",[s("p",[t._v("至多调用 ping 方法 104 次")])])]),t._v(" "),s("blockquote",[s("p",[t._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/number-of-recent-calls\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),t._v(" "),s("h2",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),s("p",[t._v("这道题目本身实现起来，并不难，但是题目比较难看懂。")]),t._v(" "),s("h3",{attrs:{id:"阅读题干"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阅读题干"}},[t._v("#")]),t._v(" 阅读题干")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('["RecentCounter", "ping", "ping", "ping", "ping"]\n[[], [1], [100], [3001], [3002]]\n输出：\n[null, 1, 2, 3, 3]\n')])])]),s("p",[s("strong",[t._v("第一行")]),t._v("：意思是我要进行的操作。第一个操作是"),s("code",[t._v("RecentCounter")]),t._v("。也就是初始化计数器。所以说后面的"),s("code",[t._v("[]")]),t._v(" 和"),s("code",[t._v("null")]),t._v(" 其实没有作用。")]),t._v(" "),s("p",[s("strong",[t._v("第二行")]),t._v("：意思是操作的时候的时间。")]),t._v(" "),s("p",[s("strong",[t._v("第三行")]),t._v("：输出的结果。")]),t._v(" "),s("p",[t._v("实际上这里并不是说一次输入一个数组进去，而是每进行一个操作（ping）就要将这个时间点记录下来，然后再判断一下当前的队列（数组）里面是不是有时间超过限制的元素，有的话就出队列（shift），没有的话就跳出（因为题目保证了后面的值一定会比前面的大，因此只需要保证队首元素在范围内就行）。")]),t._v(" "),s("p",[t._v("::: tips")]),t._v(" "),s("p",[t._v("这是我自己的理解，并不是博客，思维可能会有跳跃，LeetCode上面有一个题解比较详细。")]),t._v(" "),s("p",[t._v(":::")]),t._v(" "),s("h3",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),s("p",[t._v("因为代码本身很简单，就不用伪代码了")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("RecentCounter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把一个队列（数组）放在类上。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** \n * @param {number} t\n * @return {number}\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RecentCounter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("ping")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将该操作入队列（记录）")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在[t - 3000]之外的就抛出去")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回队列的长度，也就是还有的数值")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Your RecentCounter object will be instantiated and called as such:\n * var obj = new RecentCounter()\n * var param_1 = obj.ping(t)\n */")]),t._v("\n")])])]),s("h2",{attrs:{id:"算法复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度"}},[t._v("#")]),t._v(" 算法复杂度")]),t._v(" "),s("p",[t._v("时间复杂度："),s("code",[t._v("O(n)")]),t._v(" : 这里的n是ping的次数")]),t._v(" "),s("p",[t._v("空间复杂度："),s("code",[t._v("O(n)")]),t._v("：n是最近请求次数。最大就3000")])])}),[],!1,null,null,null);n.default=e.exports}}]);